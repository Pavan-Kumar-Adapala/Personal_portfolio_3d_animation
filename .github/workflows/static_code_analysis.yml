# this yaml file is used to check linting and static code analysis
name: static_code_analysis_pipeline
on:
  pull_request:
    branches:
      - development
  workflow_dispatch: null # manual trigger

jobs:
  linting:
    name: RUN ESLint
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x # Specify the Node.js version
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci # Use npm ci for faster installs

      - name: RUN ESLint
        # run: npm run lint # Run the linting script defined in package.json
        # Robust linting command below
        # This command will run ESLint on all JavaScript and TypeScript files in the repository
        run: |
          mkdir -p Lint_report
          npx eslint -c eslint.config.js --format json -o Lint_report/eslint-report.json
      
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: Lint_report/eslint-report.json

  static_code_analysis:
    name: Run Static Code Analysis (SonarQube)
    runs-on: ubuntu-latest
    needs: linting
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build


      # - name: Test SonarQube connectivity
      #   run: curl -v ${{ secrets.SONAR_HOST_URL }}

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=Personal_portfolio_3d
      #       -Dsonar.sources=.
      #       -Dsonar.branch.name=${{ github.ref_name }}
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Upload to GitHub artifacts
      - name: Upload dist/ as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vite-dist
          path: dist/

  # Another stage to deploy the built project to github pages using gh-pages and custom domain
  deploy_to_github_pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: static_code_analysis

    permissions:
      contents: write # Required to push to the gh-pages branch
      pages: write # Required to deploy to GitHub Pages
      id-token: write # Required for authentication with GitHub Pages

    steps:
      # Download the dist/ artifact from the previous job
      - name: Download dist/ artifact
        uses: actions/download-artifact@v4
        with:
          name: vite-dist
          path: ./dist

      - name: Verify artifact contents
        run: |
          ls -la

      - name: Zip downloaded artifact
        run: |
          zip -r dist.zip dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: Set up CNAME for GitHub Pages
        run: |
          echo "www.pavanclouds.com" > ./dist/CNAME

      - name: Deploy to GitHub Pages with custom domain
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          custom_domain: www.pavanclouds.com # Replace with your custom domain if needed


  # upload_to_nexus:
  #   name: Upload to Nexus Repository
  #   # This job will only run if the static code analysis job is successful
  #   # and the branch is Prod
  #   # if: ${{ github.event.workflow_run.head_branch == 'Prod' }}
  #   runs-on: ubuntu-latest
  #   needs: static_code_analysis
  #   permissions:
  #     actions: read
  #     contents: read
  #   steps:
  #     # Download the dist/ artifact from the previous job
  #     - name: Download dist/ artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: vite-dist
  #         path: ./dist

  #     # - name: Verify artifact contents
  #     #   run: |
  #     #     ls -la

  #     - name: Zip downloaded artifact
  #       run: |
  #         zip -r dist.zip dist

  #     - name: Upload dist.zip to Nexus raw repository
  #       run: |
  #         curl -v -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" \
  #           --upload-file dist.zip \
  #           ${{ secrets.NEXUS_RAW_URL }}/dist-${{ github.sha }}.zip
