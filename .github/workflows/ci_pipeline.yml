# This yaml file defines a GitHub Actions workflow for SAST (Static Application Security Testing) and CI pipeline.
# It includes linting with ESLint, static code analysis with SonarQube, building a Docker image, and pushing it to Docker Hub.
# Author: Pavan Kumar Adapala
# Date: 2025-06-15

name: 'SAST and CI Pipeline for Portfolio'
on:
  push:
    branches:
      - Prod
      - development
  workflow_dispatch: null # manual trigger

# Global permissions for the workflow
# These permissions are applied to all jobs in the workflow unless overridden
permissions:
  actions: read # Required to use actions like checkout, upload-artifact, etc.
  contents: read # Required to read the repository contents

jobs:
  linting:
    name: RUN ESLint
    runs-on: ubuntu-latest
    permissions:
      security-events: write # Required to upload SARIF results to the GitHub Security tab

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x # Specify the Node.js version
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci # Use npm ci for faster installs

      - name: RUN ESLint
        # run: npm run lint # Run the linting script defined in package.json
        # Robust linting command below
        # This command will run ESLint on all JavaScript and TypeScript files in the repository
        run: |
          mkdir -p Lint_report
          npx eslint -c eslint.config.js --format json -o Lint_report/eslint-report.json
        # npx eslint -c eslint.config.js --format @microsoft/eslint-formatter-sarif -o Lint_report/eslint-report.sarif .
      
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: Lint_report/eslint-report.json

      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: Lint_report/eslint-report.sarif

  static_code_analysis:
    name: Run Static Code Analysis (SonarQube)
    runs-on: ubuntu-latest
    needs: linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
      
      # SonarQube server connection test
      # - name: Test SonarQube connectivity
      #   run: curl -v ${{ secrets.SONAR_HOST_URL }}

      # # Run SonarQube scan and upload results to SonarQube server
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=Personal_portfolio_3d
      #       -Dsonar.sources=.
      #       -Dsonar.branch.name=${{ github.ref_name }}
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Upload to GitHub artifacts
      - name: Upload dist/ as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vite-dist
          path: dist/
          retention-days: 1 # Retain the artifact for 1 day
      
      - name: Run id
        run: |
          echo "run-id: " ${{ github.event.workflow_run.id }}

  # Upload build artifacts to Nexus raw hosted repository
  # upload_build_artifacts_to_nexus:
  #   name: Upload to Nexus Repository
  #   # This job will only run if the static code analysis job is successful
  #   runs-on: ubuntu-latest
  #   needs: static_code_analysis

  #   steps:
  #     # Download the dist/ artifact from the previous job
  #     - name: Download dist/ artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: vite-dist
  #         path: ./dist

  #     # - name: Verify artifact contents
  #     #   run: |
  #     #     ls -la

  #     - name: Zip downloaded build artifact
  #       run: |
  #         zip -r dist.zip dist

  #     - name: Upload dist.zip to Nexus raw repository
  #       run: |
  #         curl -v -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" \
  #           --upload-file dist.zip \
  #           ${{ secrets.NEXUS_RAW_URL }}/dist-${{ github.sha }}.zip
  
  # # Build and push Docker image to Nexus Docker Registry
  # build_and_push_docker_image_to_nexus:
  #   name: Build and Push Docker Image to Nexus
  #   runs-on: ubuntu-latest
  #   needs: static_code_analysis 
  #   permissions:
  #     packages: write # Required to push Docker images to Nexus

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Nexus Docker Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: docker.pavanclouds.com
  #         username: ${{ secrets.NEXUS_USERNAME }}
  #         password: ${{ secrets.NEXUS_PASSWORD }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: Dockerfile
  #         push: true
  #         tags: docker.pavanclouds.com/personal_portfolio_3d:${{ github.ref_name }} # if you want to tag the image with the branch name
  #         #  docker.pavanclouds.com/personal_portfolio_3d:latest
  
  # Docker image vulnerability scanning
  docker_image_vulnerability_scanning:
    name: Docker Image Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: static_code_analysis
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build the Docker image (but do not push yet)
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: false
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }}-${{ github.sha }}

      # Scan the Docker image for vulnerabilities before pushing
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: adapaladocker/personal_portfolio_3d:${{ github.ref_name }} 
          format: sarif
          output: trivy-results.sarif
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '1' # Fail the job if vulnerabilities are found in the Dockerfile


      - name: Verify Trivy scan results
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "Trivy scan results found."
          else
            echo "Trivy scan results not found."
            exit 1
          fi

      # - name: View SARIF contents
      #   run: cat trivy-results.sarif

      # Upload the Trivy scan results
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
 

  # Build and push Docker image to Docker Hub
  build_and_push_docker_image_to_docker_hub:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: docker_image_vulnerability_scanning
    permissions:
      packages: write # Required to push Docker images to Docker Hub
    
    steps:
      # checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # Use a personal access token for better security

      # Push the Docker image to Docker Hub 
      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }}-${{ github.sha }}
      
      # Verify the Docker image was pushed successfully
      - name: Verify Docker image push
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }} || \
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/personal_portfolio_3d:${{ github.ref_name }}-${{ github.sha }}
          if [ $? -ne 0 ]; then
            echo "Docker image push failed."
            exit 1
          else
            echo "Docker image pushed successfully."
          fi

  # Update the Docker image tag in the GitOps repository
  update_docker_image_tag_in_gitops_repo:
    name: Update Docker Image Tag in GitOps Repository
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image_to_docker_hub 
    permissions:
      contents: write # Required to push changes to the GitOps repository
      id-token: write # Required for authentication with GitOps repository
    
    steps:
      # Update the Docker image tag in the GitOps repository
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: Pavan-Kumar-Adapala/gitops-portfolio-3d-k8s
          ref: ${{ github.ref_name }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # Must have repo access
  
      - name: Update Docker image tag in deployment.yaml
        run: |
          sed -i "s|\(image:\s*\)adapaladocker/personal_portfolio_3d:[^[:space:]]*|\1adapaladocker/personal_portfolio_3d:${{ github.ref_name }}-${{ github.sha }}|" k8s/deployment.yaml
        
      # Commit and push changes
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/deployment.yaml
          git commit -m "Update Docker image tag & NODE_ENV for branch ${{ github.ref_name }}"
          git push origin ${{ github.ref_name }}

      - name: Check if the push was successful
        run: |
          if [ $? -ne 0 ]; then
            echo "Failed to push changes to GitOps repository."
            exit 1
          else
            echo "Changes pushed successfully to GitOps repository."
          fi


  # Another job to deploy the application to github pages using gh-pages and custom domain
  # deploy_to_github_pages:
  #   name: Deploy to GitHub Pages
  #   runs-on: ubuntu-latest
  #   needs: update_docker_image_tag_in_gitops_repo

  #   permissions:
  #     contents: write # Required to push to the gh-pages branch
  #     pages: write # Required to deploy to GitHub Pages
  #     id-token: write # Required for authentication with GitHub Pages

  #   steps:
  #     # Download the dist/ artifact from the previous job
  #     - name: Download dist/ artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: vite-dist
  #         path: ./dist

  #     - name: Verify artifact contents
  #       run: |
  #         ls -la

  #     - name: Zip downloaded artifact
  #       run: |
  #         zip -r dist.zip dist

  #     - name: Set up CNAME for GitHub Pages
  #       run: |
  #         echo "www.pavanclouds.com" > ./dist/CNAME

  #     - name: Deploy to GitHub Pages with custom domain
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./dist
          # publish_branch: gh-pages
